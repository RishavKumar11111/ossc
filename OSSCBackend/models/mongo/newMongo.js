var MongoClient = require('mongodb').MongoClient;
var url = "mongodb://localhost:27017/";
var DB = "OSSC";
var autoIncrement = require('mongodb-autoincrement');

exports.mongoConnection = function () {
    return new Promise(callback => {
        MongoClient.connect(url, { useNewUrlParser: true }, function (err, db) {
            if (err) throw err;
            callback(db)
        });
    })

};

exports.insertDocument = function (myobj, collectionName, db) {
    return new Promise(callback => {
        var dbo = db.db(DB);
        dbo.collection(collectionName).insertOne(myobj, function (error, res) {
            if (error) throw error;
            callback(res);
        });
    });
};

exports.insertManyDocuments = function (myobj, collectionName, db) {
    return new Promise(callback => {
        var dbo = db.db(DB);
        dbo.collection(collectionName).insertMany(myobj, function (error, res) {
            if (error) throw error;
            callback(res);
        });
    });
};

exports.findOne = function (collectionName, findData, db) {
    return new Promise(callback => {
        var dbo = db.db(DB);
        dbo.collection(collectionName).findOne(findData, function (err, result) {
            if (err) throw err;
            callback(result);
        });
    });
};

exports.updateOne = function (mquery, mvalue, collectionName, db) {
    return new Promise(callback => {
        var dbo = db.db(DB);
        var newvalues = { $set: mvalue };
        dbo.collection(collectionName).updateOne(mquery, newvalues, function (error, res) {
            if (error) throw error;
            callback(res);
        });
    });
};

exports.queryFindAll = function (myobj, collectionName, db) {
    return new Promise(callback => {
        var dbo = db.db(DB);
        dbo.collection(collectionName).find(myobj).toArray(function (err, result) {
            if (err) throw err;
            callback(result);
        });
    });
};

exports.queryWithAggregator = function (aggregate, collectionName, db) {
    return new Promise(callback => {
        var dbo = db.db(DB);
        dbo.collection(collectionName).aggregate(aggregate).toArray(function (err, result) {
            if (err) throw err;
            // ////console.log(result);
            callback(result);
        });
    });
};

exports.findAll = function (collectionName, db) {
    return new Promise(callback => {
        var dbo = db.db(DB);
        dbo.collection(collectionName).find({}).toArray(function (err, result) {
            if (err) throw err;
            callback(result);
        });
    });
};

exports.autoIncrement = function (myobj, collectionName, db) {
    return new Promise(callback => {
        var dbo = db.db(DB);
        autoIncrement.getNextSequence(dbo, collectionName, function (err, autoIndex) {
            callback(autoIndex);
            //save your code with this autogenerated id
        });
    })
};

exports.updateWithArrayFilter = function (mquery, mvalue, filter, collectionName, db) {
    return new Promise(callback => {
        var dbo = db.db(DB);
        var newvalues = { $set: mvalue };
        dbo.collection(collectionName).updateOne(mquery, newvalues, filter, function (err, res) {
            if (err) throw err;
            callback(res);
        });
    });
};

exports.updateWithArrayPush = function (mquery, mvalue, filter, collectionName, db) {
    return new Promise(callback => {
        var dbo = db.db(DB);
        var newvalues = { $push: mvalue };
        dbo.collection(collectionName).updateOne(mquery, newvalues, filter, function (err, res) {
            if (err) throw err;
            callback(res);
        });
    });
};

exports.updateMany = function (mquery, mvalue, collectionName, db) {
    return new Promise(callback => {
        var dbo = db.db(DB);
        var newvalues = { $set: mvalue };
        ////console.log(mquery);
        ////console.log(newvalues);
        dbo.collection(collectionName).updateMany(mquery, newvalues, function (err, res) {
            if (err) throw err;
            callback(res);
        });
    })

};

exports.removeDocument = function (myobj, collectionName, db) {
    return new Promise(callback => {
        var dbo = db.db(DB);
        dbo.collection(collectionName).deleteOne(myobj, function (err, res) {
            if (err) throw err;
            callback(res);
        });
    })

};

exports.mongoClose = function (db) {
    db.close();
}